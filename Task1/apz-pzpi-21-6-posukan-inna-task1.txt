1 БІЗНЕС-ВИМОГИ

1.1 Передумови

У сучасному світі ефективне управління запасами товарів є невід’ємною частиною успішної діяльності будь-якої торговельної мережі. Зростання обсягів продажів призводить до появи необхідності в автоматизації процесів замовлення товарів у постачальників та оптимального управління запасами продукції. 
Наразі багато мереж продуктових магазинів все ще використовують ручне формування заявок на поставку товарів, що вимагає значних зусиль від працівників магазину. Наш проєкт спрямований на створення програмного продукту, який автоматизує цей процес, аналізуючи потреби магазину та генеруючи замовлення постачальникам. Такий підхід допоможе заощадити час та знизити ймовірність помилок через людський фактор.

1.2 Бізнес-можливості

Ринок торгівлі активно розвивається, що змушує підприємства постійно вдосконалювати та автоматизувати свої бізнес-процеси. Зміни в уподобаннях споживачів, стрімкий розвиток технологій та постійна конкуренція змушують компанії пропонувати нові технологія для залучення користувачів. Для розуміння структури ринку проведений аналіз конкурентів показав, що серед лідерів в цій галузі виділяють SAP ERP та Zoho Inventory.
SAP ERP є інтегрованою системою керування ресурсами компанії, яка включає в себе функції фінансового обліку, управління закупівлями, аналітики та звітності, і забезпечує повний контроль над бізнесом. Ця система особливо ефективна для великих компаній з складною структурою, але має такий недолік, як високі витрати на впровадження та підтримку. Крім того, вона може бути складною для новачків через велику кількість модулів та функцій, призначених для управління різними галузями бізнесу.
Zoho Inventory, натомість, спеціалізується на управлінні запасами та складським обліком і пропонує просте програмне забезпечення, що є ідеальним  рішенням для невеликих підприємств з обмеженим бюджетом. На відміну від  SAP ERP, система  Zoho є хмарним рішенням, тому залежить від інтернет-з’єднання. Це може призвести до недоступності даних та проблем з роботою у разі відсутності Інтернету.
Отже, проблема, яку ми спостерігаємо у сучасних аналогах, полягає у недостатньому забезпеченні балансу між функціональністю та доступністю для користувачів. Наш продукт буде конкурентним через здатність пропонувати просте та ефективне управління товарами, яке буде зрозумілим як для новачків, так і для досвідчених користувачів.
Майбутня програмна система “Inventory” буде мати модель монетизації у вигляді підписки. Це означає що, користувачі платять за користування програмним забезпеченням щомісячно або щорічно. Крім цього, користувачі можуть оплачувати послуги підтримки та консультування з використання програми.

2 КОНЦЕПЦІЯ РІШЕННЯ

2.1 Окреслення концепції

Програмна система "Inventory" призначена для автоматизації управління запасами у продуктових магазинах. Вона дозволяє вести точний облік товарів на складі кожного магазину та автоматично створювати замовлення постачальникам. Система проводить аналіз продажів товарів, враховуючи сезонність, історію продажів та тенденції попиту, що допомагає ефективно управляти рівнем запасів і забезпечувати належний асортимент для клієнтів мережі. Впровадження цієї системи сприятиме збереженню часу працівників магазину та економії коштів для підприємства.

2.2 Головна функціональність 

Користувач повинен мати доступ до наступних функцій: 
MF1: Авторизація та реєстрація користувачів 
MF2: Управління товарами та складами
MF3: Моніторинг запасів
MF4: Візуалізація даних про температуру 
MF5: Прогнозування попиту на товари
MF6: Формування графіків замовлення
MF6: Автоматичне формування замовлень постачальникам

3 РАМКИ ТА ОБМЕЖЕННЯ

3.1 Рамки первинного випуску

У першій версії веб-сервісу для управління запасами необхідно зосередитися на основних функціях:
Серверна частина:
IR – 1: Авторизація та реєстрація
IR – 2: Оформлення підписки
IR – 3: Продаж товарів через систему
IR – 4: Створення та керування інформацією про товари, склади, постачальників та робітників
IR – 5: На основі минулих даних про попит на товари, потрібно проводити прогнозування майбутнього попиту.
IR – 6: Автоматичне формування графіків замовлення на основі прогнозів попиту та наявності товарів на складі.
IR – 7: Обробка даних про температуру на складських приміщеннях
IR – 8: Експорт та імпорт даних з бази даних.
IR – 9: Адміністрування системи.
IR – 10: Реалізація шифрування даних
Клієнтська частина: 
IR – 11: Розробка адаптивного інтерфейсу
IR – 12:  Зміна мови інтерфейсу між українською та англійською
IR – 13: Пошук та фільтрація даних 
IR – 14: Відображення даних про запаси, склади та постачальників
IR – 15: Обробка даних про температуру складських приміщень
Мобільний застосунок: 
IR – 16: Авторизація користувача
IR – 17: Перегляд та керування інформацією про товари, склад, робітників
IR – 18: Замовлення нових товарів або поповнення вже існуючих.
IR – 19: Сповіщення у разі зміни умов зберігання товару на складі

3.2 Рамки наступних випусків
У наступних версіях програмного продукту планується впровадити такі функції: 
SR–1: Додавання інструментів для аналізу даних щодо запасів та замовлень, включаючи графіки та діаграми. 
SR–2: Реалізація можливості інтеграції програми з системами автоматичного оновлення даних про продажі. 
SR–3: Створення модуля для зв'язку з клієнтами з метою відслідковування скарг та пропозицій, щоб покращувати функціональність веб-продукту.
SR-4: Впровадження декількох планів підписок в систему, з різним функціоналом та можливостями.

4 БІЗНЕС - КОНТЕКСТ

4.3 Робоче середовище

Робоче середовище для проєкту управління запасами в мережі продуктових магазинів включає наступні складові: 

- Серверна частина буде реалізована на платформі ASP.NET Core з використанням бази даних MSSQL Server, яку можна адмініструвати за допомогою SQL Management Studio. Для розробки серверної частини використовується мова програмування C# та середовище розробки Visual Studio.
- Клієнтська частина проекту буде створена з використанням фреймворку React.js на мові програмування JavaScript. Для розробки використовуватиметься Visual Studio Code.
- Мобільна частина буде розроблена за допомогою мови програмування Kotlin для платформи Android.
- Для IoT частини проекту буде використано Arduino IDE, що є інтегрованою середою розробки для мікроконтролерів Arduino, та мову програмування C++. Система IoT буде використовувати Arduino Uno як основний мікроконтролер для збору та обробки даних. Для вимірювання температури буде використаний датчик DS18B20.
