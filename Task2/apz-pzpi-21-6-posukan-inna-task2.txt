1 МЕТА РОБОТИ

Мета роботи полягає в розробці серверної частини проєкту з урахуванням прийнятих інженерних рішень. Процес включає створення загальної структури системи, побудову серверних компонентів та розробку структури бази даних. Досягнення цієї мети супроводжується створенням звіту, який включає в себе діаграми, такі як: UML-діаграма розгортання, UML діаграма прецедентів, ER-модель даних та UML-діаграма діяльності.

2 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ

2.1 Проєктування бази даних

У процесі виконання лабораторної роботи було обрано базу даних Microsoft SQL Server через її широке використання у програмній розробці на платформі .NET. Крім того, ця база даних має значний функціональний набір, який включає керування даними та високий рівень безпеки.
Під час аналізу предметної області у розробленому документі "Vision & Scope" виділяються наступні ключові сутності:
-	таблиця “user”, для зберігання записів про зареєстрованих користувачів у системі;
-	таблиця “subscription” для зберігання інформації про підписку користувачів на сервіс;
-	таблиця “subscription_type” для зберігання типів підписок користувачів;
-	таблиця “employee”, для зберігання даних про працівників;
-	таблиця “store”, для зберігання інформації про магазини;
-	таблиця “product”, для зберігання інформації про продукти;
-	таблиця “category” для зберігання типів продуктів;
-	таблиця “supplier”, для зберігання інформації про постачальників;
-	таблиця “sale”, для зберігання записів про продаж товарів;
-	таблиця “defective_products”, для зберігання інформації про зіпсовані товари;
-	таблиця “supplier_request”, для зберігання даних про заявку постачальнику;
-	таблиця “sensor” для зберігання інформації про датчики вимірювання температури;
Для керування складом необхідно розглянути взаємодію цих ключових сутностей.
Між сутностями “user” та “subscription” існує зв'язок типу один до багатьох, оскільки кожен користувач може мати багато підписок. 
Між сутностями "user" та "store" існує зв'язок один до багатьох, оскільки кожен користувач може створити багато магазинів в системі.
Між сутностями “subscription” та “subscription_type”  також існує зв'язок типу один до багатьох, оскільки кожна підписка пов'язана з одним типом підписки, проте один тип підписки може мати багато підписок. 
Між сутностями “store” та “product” існує зв'язок багато до багатьох, оскільки кожен магазин може мати багато продуктів, а також кожен продукт може бути доступним в багатьох магазинах. Для цього створюється проміжна таблиця “store_product”. 
Між сутностями “product” та “category” існує зв'язок один до багатьох, оскільки один продукт може належати лише до однієї категорії, проте кожна категорія може мати багато продуктів. 
Між сутностями “product” та “supplier” існує зв'язок один до багатьох, оскільки кожен продукт може мати багато постачальників, але кожен постачальник може постачати багато продуктів.
Між сутностями “product” та “defective_product” існує зв'язок один до багатьох, оскільки кожен продукт може мати багато зіпсованих варіантів. 
Між сутностями “supplier_request” та “product” також існує зв'язок один до багатьох, оскільки кожен запит від постачальника може включати багато продуктів. 
Між сутностями “sale” та “employee” існує зв'язок один до багатьох, оскільки кожен продаж здійснюється лише одним працівником, але кожен працівник може мати багато продажів. 
Між сутностями “sale” та “store” існує зв'язок один до багатьох, оскільки кожен продаж відбувається в конкретному магазині, проте кожен магазин може мати багато продажів. 
Між сутностями “sale” та “product” існує зв'язок багато до багатьох, оскільки кожен продаж включає в себе багато продуктів, і навпаки, кожен продукт може бути частиною багатьох продажів. Для цього створюється проміжна таблиця “sale_products”. 
Між сутностями “sensor” та “store” існує зв'язок один до багатьох, оскільки кожен датчик може бути пов'язаний лише з одним магазином, але кожен магазин може мати багато датчиків.
На основі вищезазначених сутностей та зв’язків між ними розробимо ER-діаграму бази даних (див. рис. А.1).
Для створення моделей бази даних використовуємо Microsoft SQL Server Management Studio, де можна ефективно створювати та керувати таблицями.

2.2 Сценарії функціонування 

Після визначення сутностей та їх взаємодії, розглянемо основні сценарії функціонування (див. рис.А.2).
У системі існують три типи користувачів: адміністратор, касир і власник магазину. Власник магазину може придбати підписку, яка надає йому доступ до таких дій, як керування магазинами, продуктами, працівникам. Він також може переглядати інформацію про продані товари. Касир може продавати товари зі складу, приймати поставки та перевіряти правильність замовлень, сформованих системою. Адміністратор відповідає за моніторинг системи та перегляд активності користувачів.

2.3 Діаграма активності

Проаналізуємо діаграму активності (див. рис. А.3). Ця діаграма ілюструє процес входу в систему, створення замовлення на поставку товарів, а також включає кроки з підключення датчика температури та контролю у разі високої температури. Після виявлення високої температури система автоматично відправляє повідомлення власнику, щоб сповістити його про можливий проблемний стан. Це дозволяє швидко реагувати на потенційні проблеми і забезпечує надійну роботу системи.

3 ІНЖЕНЕРНІ РІШЕННЯ 

3.1 Технології проєкту

Проаналізуємо діаграму активності (див. рис. А.3). Ця діаграма ілюструє процес входу в систему, створення замовлення на поставку товарів, а також включає кроки з підключення датчика температури та контролю у разі високої температури. Після виявлення високої температури система автоматично відправляє повідомлення власнику, щоб сповістити його про можливий проблемний стан. Це дозволяє швидко реагувати на потенційні проблеми і забезпечує надійну роботу системи.

3.2 Структура проєкту

Проєкт "Inventory" складається з  декількох ключових компонентів. Серед них контролери, які обробляють HTTP-запити, контекст бази даних для взаємодії з нею, об'єкти передачі даних (DTO) для обміну інформацією, інтерфейси, міграції, що фіксують структуру бази даних , моделі, сервіси та інструменти для різноманітних завдань. 

3.3 Безпека проєкту 

В системі забезпечено безпеку даних користувачів за допомогою двох шарів захисту: JWT (JSON Web Token) для шифрування та підпису і хешування паролів з використанням SHA-256. При виклику методу hashPassword, він приймає строку паролю, перетворює її в байтовий масив, обчислює хеш, і повертає закодований пароль у вигляді рядка з використанням Base64.

3.4 Специфікація REST API

Проєкт надає широкий набір можливостей через REST API для ефективного керування торговими процесами та взаємодії різних користувачів у системі. Нижче наведено специфікацію основних методів API та їх призначення (див. табл. 1).

Таблиця 1. – Специфікація проєкту
|----------------------------------------------------------------------------------------------------------------------------
| Сутність            | Метод | Посилання                                  | Дія                                            |
|---------------------|-------|--------------------------------------------|------------------------------------------------|
| User                | POST  | /api/User/Register                         | Реєстрація користувача в системі               |
|                     | POST  | /api/User/Login                            | Вхід в систему                                 |
|                     | GET   | /api/User                                  | Отримання всіх користувачів в системі          |
| Employee            | POST  | /api/Employee                              | Додавання працівника в систему                 |
|                     | DELETE| /api/Employee/{id}                         | Видалення користувача з системи                |
|                     | PUT   | /api/Employee/{id}                         | Оновлення даних про працівника                 |
|                     | GET   | /api/Employee/{id}/stores                  | Отримання магазинів, для конкретного працівника|
| Store               | POST  | /api/Store                                 | Створення магазину                             |
|                     | GET   | /api/Store/{userId}                        | Отримання магазинів створених власником        |
|                     | PUT   | /api/Store/{storeId}                       | Оновлення інформації про магазини              |
| Subscription        | POST  | /api/Subscription/{userId}                 | Оформлення підписки                            |
|                     | POST  | /api/Subscription/addType                  | Створення типів підписки                       |
|                     | GET   | /api/Subscription                          | Отримання всіх підписок в системі              |
|                     | GET   | /api/Subscription/{userId}                 | Отримання підписки для конкретного користувача |
| Product             | POST  | /api/Product                               | Додавання товару в систему                     |
|                     | DELETE| /api/Product/{productId}                   | Видалення продукту                             |
|                     | GET   | /api/Product/{storeId}                     | Отримання продуктів для конкретного магазину   |
|                     | PUT   | /api/Product/{productId}                   | Оновлення інформації про продукт               |
| Defective Products  | GET   | /api/DefectiveProducts                     | Отримання зіпсованих товарів                   |
| Sale                | POST  | /api/Sale                                  | Продаж товару                                  |
|                     | GET   | /api/Sale/{storeId}                        | Отримання продажу товарів                      |
| Supplier            | POST  | /api/Supplier                              | Додавання постачальника                        |
|                     | GET   | /api/Supplier                              | Отримання постачальників                       |
|                     | DELETE| /api/Supplier/{id}                         | Видалення постачальника                        |
| Supplier Request    | GET   | /api/SupplierRequest                       | Отримати сформовані заявки                     |
|                     | PUT   | /api/SupplierRequest{id}                   | Оновлення даних про заявку                     |
|                     | DELETE| /api/SupplierRequest{id}                   | Видалення заявки                               |
| Category            | POST  | /api/Category                              | Додавання категорій                            |
|                     | GET   | /api/Category                              | Отримання категорій                            |
|                     | GET   | /api/Category/{categoryId}                 | Фільтрація товарів по категоріям               |
|                     | DELETE| /api/Category/ {categoryId}                | Видалення категорії                            |
| Sensor              | POST  | /api/Sensor                                | Додавання сенсору                              |
|                     | DELETE| /api/Sensor/{sensorId}                     | Видалення сенсору                              |
| Backup              | POST  | /api/Backup/CreateBackup                   | Створення резервної копії користувацьких даних |
-----------------------------------------------------------------------------------------------------------------------------

4 ВИСНОВКИ

Під час виконання завдання була створена серверна частина програмної системи, а також складено відповідний звіт. У звіті міститься детальний опис використаних інженерних рішень, а також надані посилання на вихідний код проекту. Для більшого розуміння структури та функціоналу системи було використано чотири типи діаграм: ER-модель бази даних, UML-діаграма розгортання, UML-діаграма прецедентів та UML-діаграма діяльності.
 

5 ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ 

Посилання на архів з кодом: https://github.com/NurePosukanInna/apz-pzpi-21-6-posukan-inna/tree/main/Task2
Посилання на відео: https://youtu.be/p8NHG1FHPVE